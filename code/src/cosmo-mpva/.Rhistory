plot_temp <- plot_temp + scale_color_manual(values = sighted_triple_colors,
name = "Decoding partitions")
}
# assign new name to the sub plot
assign(paste0('plot_temp_', groups[g]), plot_temp)
rm(plot_temp)
}
#PASTE THIS ROI AFTER BOTH GORUPS ARE DONE WITH PATCHWORK!
plot_joined_temp <- plot_temp_blind + plot_temp_sighted
assign(paste('plot_crossmodal', roi[r], sep = '_'), plot_joined_temp)
rm(plot_temp_blind, plot_temp_sighted, plot_joined_temp)
plot_crossmodal_Broca
source("/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R")
for(g in seq_along(groups)){
#Slice the df to get given roi and group
plot_df <- mvpa_joined_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#make the basic plot with function
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df)
#recolour the plot based on group
if (groups[g] == 'blind') {
plot_temp <- plot_temp + scale_color_manual(values = blind_triple_colors,
name = "Decoding partitions")
} else if (groups[g] == 'sighted') {
plot_temp <- plot_temp + scale_color_manual(values = sighted_triple_colors,
name = "Decoding partitions")
}
# assign new name to the sub plot
assign(paste0('plot_temp_', groups[g]), plot_temp)
rm(plot_temp)
}
#PASTE THIS ROI AFTER BOTH GORUPS ARE DONE WITH PATCHWORK!
plot_joined_temp <- plot_temp_blind + plot_temp_sighted
assign(paste('plot_crossmodal', roi[r], sep = '_'), plot_joined_temp)
rm(plot_temp_blind, plot_temp_sighted, plot_joined_temp)
plot_crossmodal_Broca
source("/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R")
for(g in seq_along(groups)){
#Slice the df to get given roi and group
plot_df <- mvpa_joined_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#make the basic plot with function
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df)
#recolour the plot based on group
if (groups[g] == 'blind') {
plot_temp <- plot_temp + scale_color_manual(values = blind_triple_colors,
name = "Decoding partitions")
} else if (groups[g] == 'sighted') {
plot_temp <- plot_temp + scale_color_manual(values = sighted_triple_colors,
name = "Decoding partitions")
}
# assign new name to the sub plot
assign(paste0('plot_temp_', groups[g]), plot_temp)
rm(plot_temp)
}
#PASTE THIS ROI AFTER BOTH GORUPS ARE DONE WITH PATCHWORK!
plot_joined_temp <- plot_temp_blind + plot_temp_sighted
assign(paste('plot_crossmodal', roi[r], sep = '_'), plot_joined_temp)
rm(plot_temp_blind, plot_temp_sighted, plot_joined_temp)
plot_crossmodal_Broca
source("/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R")
for(g in seq_along(groups)){
#Slice the df to get given roi and group
plot_df <- mvpa_joined_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#make the basic plot with function
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df)
#recolour the plot based on group
if (groups[g] == 'blind') {
plot_temp <- plot_temp + scale_color_manual(values = blind_triple_colors,
name = "Decoding partitions")
} else if (groups[g] == 'sighted') {
plot_temp <- plot_temp + scale_color_manual(values = sighted_triple_colors,
name = "Decoding partitions")
}
# assign new name to the sub plot
assign(paste0('plot_temp_', groups[g]), plot_temp)
rm(plot_temp)
}
#PASTE THIS ROI AFTER BOTH GORUPS ARE DONE WITH PATCHWORK!
plot_joined_temp <- plot_temp_blind + plot_temp_sighted
assign(paste('plot_crossmodal', roi[r], sep = '_'), plot_joined_temp)
rm(plot_temp_blind, plot_temp_sighted, plot_joined_temp)
plot_crossmodal_Broca
source("/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R")
for(g in seq_along(groups)){
#Slice the df to get given roi and group
plot_df <- mvpa_joined_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#make the basic plot with function
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df)
#recolour the plot based on group
if (groups[g] == 'blind') {
plot_temp <- plot_temp + scale_color_manual(values = blind_triple_colors,
name = "Decoding partitions")
} else if (groups[g] == 'sighted') {
plot_temp <- plot_temp + scale_color_manual(values = sighted_triple_colors,
name = "Decoding partitions")
}
# assign new name to the sub plot
assign(paste0('plot_temp_', groups[g]), plot_temp)
rm(plot_temp)
}
#PASTE THIS ROI AFTER BOTH GORUPS ARE DONE WITH PATCHWORK!
plot_joined_temp <- plot_temp_blind + plot_temp_sighted
assign(paste('plot_crossmodal', roi[r], sep = '_'), plot_joined_temp)
rm(plot_temp_blind, plot_temp_sighted, plot_joined_temp)
plot_crossmodal_Broca
source("/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R")
rm(r, g)
for(r in seq_along(roi)){
for(g in seq_along(groups)){
#Slice the df to get given roi and group
plot_df <- mvpa_joined_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#make the basic plot with function
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df)
#recolour the plot based on group
if (groups[g] == 'blind') {
plot_temp <- plot_temp + scale_color_manual(values = blind_triple_colors,
name = "Decoding partitions")
} else if (groups[g] == 'sighted') {
plot_temp <- plot_temp + scale_color_manual(values = sighted_triple_colors,
name = "Decoding partitions")
}
# assign new name to the sub plot
assign(paste0('plot_temp_', groups[g]), plot_temp)
rm(plot_temp)
}
#PASTE THIS ROI AFTER BOTH GORUPS ARE DONE WITH PATCHWORK!
plot_joined_temp <- plot_temp_blind + plot_temp_sighted
assign(paste('plot_crossmodal', roi[r], sep = '_'), plot_joined_temp)
rm(plot_temp_blind, plot_temp_sighted, plot_joined_temp)
}
plot_crossmodal_V1
r = 1; g = 1;
source("/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R")
plot_df <- mvpa_joined_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#Slice the average summary df
avg_df <- mvpa_accuracy_joined %>%
filter(roiArea == roi[r],
group == groups[g])
plot_temp_anot <- crossmodal_mvpa_plot_ReadSpeech(plot_df, avg_df)
source("/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R")
#make the basic plot with function
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df)
plot_temp
if (groups[g] == 'blind') {
plot_temp <- plot_temp +
scale_color_manual(values = blind_triple_colors,
name = "Decoding partitions") +
annotate("text",
x = conditions,
y = 5,
label = c(round(avg_df$mean_accuracy, digits = 2)))
} else if (groups[g] == 'sighted') {
plot_temp <- plot_temp +
scale_color_manual(values = sighted_triple_colors,
name = "Decoding partitions")
}
if (groups[g] == 'blind') {
plot_temp <- plot_temp +
scale_color_manual(values = blind_triple_colors,
name = "Decoding partitions") +
annotate("text",
x = "conditions",
y = 5,
label = c(round(avg_df$mean_accuracy, digits = 2)))
} else if (groups[g] == 'sighted') {
plot_temp <- plot_temp +
scale_color_manual(values = sighted_triple_colors,
name = "Decoding partitions")
}
plot_temp
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df)
#recolour the plot based on group
if (groups[g] == 'blind') {
plot_temp <- plot_temp +
scale_color_manual(values = blind_triple_colors,
name = "Decoding partitions") +
annotate("text",
x = 0.5,
y = 5,
label = c(round(avg_df$mean_accuracy, digits = 2)))
} else if (groups[g] == 'sighted') {
plot_temp <- plot_temp +
scale_color_manual(values = sighted_triple_colors,
name = "Decoding partitions")
}
plot_temp
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df)
#recolour the plot based on group
if (groups[g] == 'blind') {
plot_temp <- plot_temp +
scale_color_manual(values = blind_triple_colors,
name = "Decoding partitions") +
annotate("text",
x = c(plot_df$conditions),
y = 5,
label = c(round(avg_df$mean_accuracy, digits = 2)))
} else if (groups[g] == 'sighted') {
plot_temp <- plot_temp +
scale_color_manual(values = sighted_triple_colors,
name = "Decoding partitions")
}
plot_temp
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df)
#recolour the plot based on group
if (groups[g] == 'blind') {
plot_temp <- plot_temp +
scale_color_manual(values = blind_triple_colors,
name = "Decoding partitions") +
annotate("text",
x = c('WordPseudoword', 'WordControl','PseudowordControl'),
y = 5,
label = c(round(avg_df$mean_accuracy, digits = 2)))
} else if (groups[g] == 'sighted') {
plot_temp <- plot_temp +
scale_color_manual(values = sighted_triple_colors,
name = "Decoding partitions")
}
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df)
#recolour the plot based on group
if (groups[g] == 'blind') {
plot_temp <- plot_temp +
scale_color_manual(values = blind_triple_colors,
name = "Decoding partitions") +
annotate("text",
x = 1:9,
y = 5,
label = c(round(avg_df$mean_accuracy, digits = 2)))
} else if (groups[g] == 'sighted') {
plot_temp <- plot_temp +
scale_color_manual(values = sighted_triple_colors,
name = "Decoding partitions")
}
plot_temp
avg_df <- mvpa_accuracy_avg %>%
filter(roiArea == roi[r],
group == groups[g])
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df)
#recolour the plot based on group
if (groups[g] == 'blind') {
plot_temp <- plot_temp +
scale_color_manual(values = blind_triple_colors,
name = "Decoding partitions") +
annotate("text",
x = 1:3,
y = 5,
label = c(round(avg_df$mean_accuracy, digits = 2)))
} else if (groups[g] == 'sighted') {
plot_temp <- plot_temp +
scale_color_manual(values = sighted_triple_colors,
name = "Decoding partitions")
}
plot_temp
source("/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R")
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df, avg_df)
plot_temp
#Slice the df to get given roi and group
plot_df <- mvpa_joined_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#Slice the average summary df
avg_df <- mvpa_accuracy_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#make the basic plot with function
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df, avg_df)
plot_temp
source("/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R")
plot_df <- mvpa_joined_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#Slice the average summary df
avg_df <- mvpa_accuracy_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#make the basic plot with function
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df)
plot_temp
source("/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R")
plot_df <- mvpa_joined_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#Slice the average summary df
avg_df <- mvpa_accuracy_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#make the basic plot with function
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df, avg_df)
source("/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R")
plot_df <- mvpa_joined_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#Slice the average summary df
avg_df <- mvpa_accuracy_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#make the basic plot with function
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df, avg_df)
plot_temp
## TO CONSIDER:
# 1. make mean + SDs THE DARKEST version of the colour and check if they are visible and better than black!
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
blind_triple_colors <- c(brewer.pal(3, "Pastel2")[1],
brewer.pal(3, "Dark2")[1],
brewer.pal(3, "Set2")[1])
#
sighted_triple_colors <- c(brewer.pal(3, "Pastel2")[2],
brewer.pal(3, "Dark2")[2],
brewer.pal(3, "Set2")[2])
for(r in seq_along(roi)){
for(g in seq_along(groups)){
#Slice the df to get given roi and group
plot_df <- mvpa_joined_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#Slice the average summary df
avg_df <- mvpa_accuracy_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#make the basic plot with function
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df, avg_df)
#recolour the plot based on group
if (groups[g] == 'blind') {
plot_temp <- plot_temp +
scale_color_manual(values = blind_triple_colors,
name = "Decoding partitions")
} else if (groups[g] == 'sighted') {
plot_temp <- plot_temp +
scale_color_manual(values = sighted_triple_colors,
name = "Decoding partitions")
}
# assign new name to the sub plot
assign(paste0('plot_temp_', groups[g]), plot_temp)
rm(plot_temp)
}
#PASTE THIS ROI AFTER BOTH GORUPS ARE DONE WITH PATCHWORK!
plot_joined_temp <- plot_temp_blind + plot_temp_sighted
assign(paste('plot_crossmodal', roi[r], sep = '_'), plot_joined_temp)
rm(plot_temp_blind, plot_temp_sighted, plot_joined_temp)
}
plot_crossmodal_V1
source("/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R")
## TO CONSIDER:
# 1. make mean + SDs THE DARKEST version of the colour and check if they are visible and better than black!
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
blind_triple_colors <- c(brewer.pal(3, "Pastel2")[1],
brewer.pal(3, "Dark2")[1],
brewer.pal(3, "Set2")[1])
#
sighted_triple_colors <- c(brewer.pal(3, "Pastel2")[2],
brewer.pal(3, "Dark2")[2],
brewer.pal(3, "Set2")[2])
for(r in seq_along(roi)){
for(g in seq_along(groups)){
#Slice the df to get given roi and group
plot_df <- mvpa_joined_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#Slice the average summary df
avg_df <- mvpa_accuracy_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#make the basic plot with function
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df, avg_df)
#recolour the plot based on group
if (groups[g] == 'blind') {
plot_temp <- plot_temp +
scale_color_manual(values = blind_triple_colors,
name = "Decoding partitions")
} else if (groups[g] == 'sighted') {
plot_temp <- plot_temp +
scale_color_manual(values = sighted_triple_colors,
name = "Decoding partitions")
}
# assign new name to the sub plot
assign(paste0('plot_temp_', groups[g]), plot_temp)
rm(plot_temp)
}
#PASTE THIS ROI AFTER BOTH GORUPS ARE DONE WITH PATCHWORK!
plot_joined_temp <- plot_temp_blind + plot_temp_sighted
assign(paste('plot_crossmodal', roi[r], sep = '_'), plot_joined_temp)
rm(plot_temp_blind, plot_temp_sighted, plot_joined_temp)
}
plot_crossmodal_Broca
source("/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R")
## TO CONSIDER:
# 1. make mean + SDs THE DARKEST version of the colour and check if they are visible and better than black!
source('/Volumes/Slim_Reaper/Projects/Language_MVPA/code/src/cosmo-mpva/mvpa_plot_functions.R')
blind_triple_colors <- c(brewer.pal(3, "Pastel2")[1],
brewer.pal(3, "Dark2")[1],
brewer.pal(3, "Set2")[1])
#
sighted_triple_colors <- c(brewer.pal(3, "Pastel2")[2],
brewer.pal(3, "Dark2")[2],
brewer.pal(3, "Set2")[2])
for(r in seq_along(roi)){
for(g in seq_along(groups)){
#Slice the df to get given roi and group
plot_df <- mvpa_joined_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#Slice the average summary df
avg_df <- mvpa_accuracy_avg %>%
filter(roiArea == roi[r],
group == groups[g])
#make the basic plot with function
plot_temp <- crossmodal_mvpa_plot_ReadSpeech(plot_df, avg_df)
#recolour the plot based on group
if (groups[g] == 'blind') {
plot_temp <- plot_temp +
scale_color_manual(values = blind_triple_colors,
name = "Decoding partitions")
} else if (groups[g] == 'sighted') {
plot_temp <- plot_temp +
scale_color_manual(values = sighted_triple_colors,
name = "Decoding partitions")
}
# assign new name to the sub plot
assign(paste0('plot_temp_', groups[g]), plot_temp)
rm(plot_temp)
}
#PASTE THIS ROI AFTER BOTH GORUPS ARE DONE WITH PATCHWORK!
plot_joined_temp <- plot_temp_blind + plot_temp_sighted
assign(paste('plot_crossmodal', roi[r], sep = '_'), plot_joined_temp)
rm(plot_temp_blind, plot_temp_sighted, plot_joined_temp)
}
plot_crossmodal_V1
plot_crossmodal_MTG
plot_crossmodal_Broca
plot_crossmodal_FG4
plot_crossmodal_FG2
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(data.table)
library(cowplot)
library(RColorBrewer)
library(patchwork)
ffx <- 'beta' # beta tmap
#featRatio <- '0.8' #just for saving outputs?
#space <-'IXI549Space'
FWHM <- 2
groups <- c('blind', 'sighted') # blind or sighted
# set te path to the task folder
cosmo_results <- '/Volumes/Slim_Reaper/Projects/Language_MVPA/outputs/derivatives/cosmo-mvpa'
#task_audVis <-  paste('task-audVisMotSpatialFreq_space-MNI152NLin2009cAsym_FWHM-', as.character(FWHM), '_node-mvpaBlockAverage', sep ='')
task_ReadSpeech <- paste0('task-MultimodalReadSpeech_space-IXI549Space_FWHM-',as.character(FWHM),'_node-mvpa6betas')
decoding_label <- 'JuBrain'#'visfatlas' #'cVWFA' 'LexPerVWFA' 'JuBrain'
cosmo_results_path_ReadSpeech <- paste(cosmo_results, task_ReadSpeech,  decoding_label,
'unimodal','accuracy', sep ='/')
#namePattern <- paste('sub-',group,'.*_label-VWFAwithinmodal_.*\\.csv$', sep = '')
for(g in seq_along(groups)) {
#Set name pattern and get the files
#namePattern <- paste('sub-',groups[g],'.*_label-VWFAwithinmodal_.*\\.csv$', sep = '')
#namePattern <- paste('sub-',groups[g],'.*_label-VWFAcrossmodal_.*\\.csv$', sep = '')
namePattern <- paste('sub-',groups[g],'.*_label-',decoding_label,'_.*\\.csv$', sep = '')
allfiles_ReadSpeech <- list.files(cosmo_results_path_ReadSpeech, pattern = namePattern)
group_df_temp <- lapply(paste(cosmo_results_path_ReadSpeech,
allfiles_ReadSpeech, sep ='/'),
read.csv, sep =',') %>%
rbindlist %>%
dplyr::select(!contains('permutation')) %>%
mutate(accuracy = accuracy * 100) %>% #make %
mutate(group = groups[g])#drop the null distribution columns %>%
#Rename the group DF
assign(paste0('mvpa_',groups[g]), group_df_temp)
rm(group_df_temp)
}
#join the dfs
mvpa_joined <- rbind(mvpa_blind, mvpa_sighted) %>%
mutate(conditions = factor(conditions, levels = c('WordPseudoword', 'WordControl',
'PseudowordControl')))
rm(mvpa_blind, mvpa_sighted)
#Name of ROIs
roi <- unique(mvpa_joined$roiArea)
#Name of decoding conditions
classifier <- unique(mvpa_joined$conditions)
modalities <- unique(mvpa_joined$modality)
mvpa_accuracy <-  mvpa_joined %>%
mutate(conditions = factor(conditions, levels = classifier)) %>%
group_by(group,
roiArea,
ffxResults,
modality,
conditions) %>%
summarize(mean_accuracy = mean(accuracy),
sd_accurarcy = sd(accuracy),
se_accuracy = sd(accuracy)/sqrt(20),
.groups = 'keep')
m = 1; r = 1; g = 1;
plot_df <- mvpa_joined%>%
filter(roiArea == roi[r],
group == groups[g],
modality == modalities[m])
#Slice the average summary df
accu_df <- mvpa_accuracy %>%
filter(group == groups[g] &
modality == modalities[m] &
ffxResults == ffx &
roiArea == roi[r])
View(plot_df)
View(accu_df)
